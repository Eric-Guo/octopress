---
layout: post
title: "五年技术发展计划"
date: 2020-12-17T16:52:54+08:00
comments: true
external-url: 
categories: [Plan]
---

工作单位需要制定五年的技术发展计划，制定计划永远是一个好习惯。如果能做到下面两点的话：一，计划没有和世界线的发展发生大的偏差和背离；二，能够严格按照计划执行。

严格执行与否不是计划所能决定的，但是制定一个顺着世界线发展的计划倒是重中之重。

## 世界线

2020的世界发生了比较大的变化，脱钩，去全球化成了世界的主旋律，而在中国，公平也压过了以往对效率的追求。很多之前的内在逻辑都变了，比如自主可控性的要求会大大提高，容易学习几乎不再作为衡量一项技术是否有前途的的指标，当然，大众技术永远是中小企业的追求，毕竟企业需要新人，如果学习全部教Java，那么Java技术栈就肯定是一个不错的选择。

华为刚刚在上周公布了鸿蒙2.0，[谷歌的
Fuchsia也将在2021年春发布](https://zhuanlan.zhihu.com/p/336908528) ，苹果的M1芯片更是吹响了x86指令集的落幕悲音。从以写程序为生的角度看，运行程序的操作系统恐怕在5年内都要发生大的变化，跟不用说在上面跑的语言和框架了。

跟随有前途的语言，跟随有前途的平台，为能出钱，或者能赚钱的平台写程序永远是不变的追求。

## 语言

Java, .Net之类的中间语言和中产一样，注定要在未来衰弱。未来的语言只有非常成功或者默默无闻，对与性能的追求也一样，要么锱铢必较，连GC垃圾搜集也不要有，要么就是Python/Ruby/JS之类的极端灵活随意，Java做为大众语言，几乎肯定是现在程序员的第一入门语言，但是就和你很少会和初恋情人结婚一样，真的面向未来的语言选择，Java这个大众属性并不能作为一个积极指标。

作为在过去10年主要使用Ruby的开发者（之前是.Net），我不否认Ruby一直在走下坡路。虽然Ruby运行速度在过去5年至少快了3倍，不过，似乎并没有太多人在意。所以我未来5年肯定是不用继续用Ruby的。

我个人计划是大力学习发展Javascript（实际上也从backbone.js时代就开始了），如果对性能有较极端要求，用Go顶一下（但说实话，实际项目还没找到机会）。

## 数据库

数据库作为CRUD Boy标配，过去5年就是开源的天下，MySQL PostgreSQL永远是唯二的选择。国内的[TiDB](https://pingcap.com/zh/)与国外的[clickhouse](https://clickhouse.tech)在横向扩展和列存储上优势越来越明显，所以开发这边首选还是MySQL，因为除了PostgreSQL，另外三个在数据库访问方式上都可以互相无缝替换。

## 操作系统平台

平台战争会继续，内在的原因可能是不同的应用需要的运行环境完全不同，这个世界再也不会出现Windows / Linux 这样的通用平台，但是那些为特定目的设计的专用平台肯定会用途越来越多。

## 跨平台

在无法预知的情况下，跨平台的诱惑始终很大，但是鉴于Java的历史教训，以及苹果的成功，在强调用户体验的情况下，原生应用恐怕是严肃应用的唯一选择，对于企业来说，在无法负担书写多个原生应用的成本的前提下（比如iOS/Android/鸿蒙），才会考虑类似小程序这样的跨端应用，我觉得我的工作单位基本上属于这类企业，所以小程序还是重点发展的。

微信原生的小程序完全无法跨平台，绑定在微信平台上，Taro提供了较好的跨端方案，开发成本略高，但是考虑到未来的迁移方便还是值得。

## Web平台

真正的跨平台应用其实是Web，随着IE的远离，Web端的编程方式会迎来一波发展大潮，Web网页会越来越像应用，用户会进一步感知不到页面的刷新，这一传统web页面的访问方式。前端框架的使用不可避免。

从实践看，基于React的前端开发方式可以真正的脱离web本质上html+form的交互方式，全屏，全界面交互是趋势，类似Rails这样的弹窗交互为主，有限的几个点的全屏交互将越来越无法满足用户的预期。

从开发角度，React的开发方式相比Rails，在熟练度接近的情况下，开发速度仍然有至少2倍的差距。

即使开发速度上有差距，Web的开发方向仍然是React这样的编程方式。其余方案还有很多，偏Rails的还有[StimulusReflex](https://docs.stimulusreflex.com)或者[DHH 即将发布的 New MAGIC](https://twitter.com/dhh/status/1278393536312774656)，这里的取舍就是开发速度。

## App端

App端最有前途的还是苹果的生态，不是说苹果的东西有多好，而是[其他用不起苹果的用户付费意愿太低](https://www.macrumors.com/2020/10/02/app-store-earned-twice-google-play-store-q3-2020/)，但由于世界上还是99%的穷人，安卓还是太多人的第一选择，包括我。

从开发角度还是优先为苹果开发，成功了才需要考虑安卓，鉴于两者开发方式同web极大的不同，开发成本这边肯定还是要避免轻易开新项目。

## 报表平台

其实报表平台是一个伪概念，现在图表已经是应用内置的一个功能，鉴于现在工作单位的确还有一个报表平台，所以单独说一下，原则上，个人不会花任何精力在一个不开源的技术上，所以先有报表和目前我开发的echart/D3的报表是敌对关系，我开发的基于echart的报表的弱点是开发速度慢，其余都是优点（速度，可定制）。

## 人工智能

人工智能这几年发展变化很大，前面还是tensorflow一家独大，现在pytouch，百度飞桨还有Apple ML，基本呈现混战状态（当然也可能我没有太关注这块）。未来肯定要将主要精力放在应用上，至于制作人工智能模型（炼丹），时间有限还是算了。

## Serverless

云函数，Serverless的来到主要会改变应用的部署和计费方式，如果Serverless最终被证明在比虚拟机更便宜的前提下，还具有线性扩展性，那么编程的方式肯定会为Serverless做出改变。Serverless一个比较接近的概念是微服务，目前这两个的问题都是将一个完整的应用拆成各个小块后，内在的复杂性会提高，若能克服的话，未来会很有前途。

Serverless的框架我将一直跟进[redwood.js](https://redwoodjs.cn)，中国区的镜像站点我目前在维护。

## 天华中心化数据平台
数据获取渠道服务化，最大限度减少各个数据库之间相互直连的状态。可以大规模使用RestAPI、GraphQL、gRPC等技术。
GraphQL
GraphQL不是一个新技术，我还记得2019年的Ruby conf china有一个专门做[服装MES的有数派](https://www.youshupai.com/technologyProduct.html)已经早就实践了很久了，当然这家公司现在已经凉了。GraphQL相比RestfulAPI最大的贡献就是提出了聚合的概念，可以在一个呼叫中取得一个页面所需的所有数据，从来提高用户体验，缺点也非常明显，所有的呼叫都只有一个端点，缓存几乎无法做，性能肯定会差。
最重要的是GraphQL真的很复杂，虽然现在[PostGraphile和Apollo](https://ruby-china.org/topics/40334)在试图降低复杂性，但是至少从这个时间点看，GraphQL还是不必要的复杂了。
RestAPI和GraphSQL其实不矛盾，我的观点是当你一个API可以返回一个页面的所有数据后，那么你这个API就是GraphQL了。

# 总结

未来5年将重点发展 JS，Web端，小程序端，特别赌一下Taro平台。

总的原则就是，在保证应用系统用户很爽的前提下，替客户节省各种费用（开发费用，部署运营费用）。





